{
  "hovership": {
  "splashImage": "assets/images/hovership.png",
  "title": "Hovership",
  "content": "<p>Hovership is a simple 3D platforming game with a low-poly art style. I developed it with a friend over the course of a couple of years, meeting once every week or two. We created the assets from scratch using Blender, and implemented custom player and camera physics.</p><p>The game has a single level, in which the player must dodge deadly turret fire to collect enough Power Shards to gain the power of flight and be able to find the key which wins the game.</p>",
  "repoLink": "https://github.com/Danjb1/hovership",
  "otherLink": "https://www.youtube.com/watch?v=4cLMlKfPOBY"
  },
  "hashcode": {
    "splashImage": "assets/images/holy-guac.jpg",
    "title": "Google HashCode",
    "content": "<p>Google HashCode is an annual world-wide team programming competition. I entered it with three friends and colleagues as team Holy Guacamole in 2019 and 2020.</p><p>The problem in 2019 was to arrange photo objects into slideshows which were most 'interesting', according to a certain algorithm. Our solution started at the basic level - composing slideshows of photos in the order they were recevied - and advanced to attempting to group photos with popular 'tags' nearer each other, as such groupings were worth more points.</p><p>We wrote our <a href=\"https://github.com/Danjb1/google-hashcode-2019\">solution in Typescript</a>, which was compiled and run on Node. Afterwards, I <a href=\"https://github.com/esummers1/hashcode19\">ported our application to Python</a> and continued to work on it. Since Google provide several input files that have different characteristics, one strategy does not fit all - I designed the Python version to have a bank of strategies with which to group each set of photos, and to choose the most successful strategy for each input file to generate the output solution.</p><p>In 2020, the problem was harder, and revolved around scheduling the scanning of physical books in libraries with different collections. Again, we wrote our <a href=\"https://github.com/esummers1/hashcode-2020\">solution(s) in TypeScript</a> and ran them using Node. While we intended to apply the strategy-selection logic throughout, the problem this year was not easy to model, and we did not have enough time to build a local scoring engine.</p><p>In both cases, we finished in the top 30% of teams worldwide.</p>",
    "repoLink": "",
    "otherLink": ""
  },
  "website": {
    "splashImage": "assets/images/angular.png",
    "title": "This Website",
    "content": "<p>This website is written in Typescript using Angular, without a true backend - the server delegates routing to the client, and the site's content is populated from static JSON assets. The UI is largely composed using Angular Material, and is optimized for viewing on mobile.</p><p>It is specifically designed to make it simple to add more pages; for a page about a project following the existing format, all that's needed is to add data to the JSON data files.</p>",
    "repoLink": "https://github.com/esummers1/website",
    "otherLink": ""
  },
  "acs": {
    "splashImage": "assets/images/acs.jpg",
    "title": "Agricultural Capitalism Simulator",
    "content": "<p>Agricultural Capitalism Simulator (ACS) is a tongue-in-cheek command-line farming business simulator. The player is given some money and a field, and told to make the greatest amount of profit possible in the allotted number of years. Different crops have different ideal weather conditions, and different fields (which the player can purchase) have different qualities. The weather is generated each game year, producing a certain yield in each field according to its planted crop's characteristics.</p><p>There is also an AI mode, in which a basic evolutionary algorithm with a small set of weightings (probability to plant each crop, and aggressiveness when purchasing new land) optimizes those weightings for high scores. The best strategies from each checkpoint generation will be printed to the player at the terminal.</p><p>ACS was originally written in Java; I later ported it to Python, to practise the language.</p>",
    "repoLink": "https://github.com/esummers1/agricultural-capitalism-simulator-py",
    "otherLink": ""
  },
  "orbit-simulator": {
    "splashImage": "assets/images/orbit-simulator.jpg",
    "title": "Orbit Simulator",
    "content": "<p>Orbit Simulator is a two-dimensional physics sandbox. It uses a high physics framerate (decoupled from the slower rendering framerate) to compute the orbits of moons, planets and stars using real-world figures at high time accelerations.</p><p>The player can focus the camera on different objects in the simulation, adjust the display scale and time acceleration factor, and 'fire' new objects into the simulation. These new bodies will be created using the average path and velocity of the mouse-drag, meaning they appear seamlessly and intuitively. The other objects in the simulation will feel the gravitational effects of the new object immediately.</p><p>Objects that collide merge into a new object with the combined mass and volume of its parents; its colour will also be an average.</p><p>Orbit Simulator is written in Java and uses Swing for the UI. It can handle highly-accelerated simulation of dozens of bodies without slowdown, though dense objects such as black holes can cause weird behaviour when other objects pass very close.<p>",
    "repoLink": "https://github.com/esummers1/orbit-simulator",
    "otherLink": ""
  },
  "ping": {
    "splashImage": "assets/images/pong.png",
    "title": "Ping",
    "content": "<p>Ping is an homage to the classic arcade game Pong, with some liberties taken on physics. It appears similar to the original, with two white rectangles for paddles and a white square for a ball.</p><p>The player controls the left paddle, and a rudimentary AI controls the right paddle. The paddle will accelerate and decelerate with a feeling of some weight, rather than just moving up and down linearly. The ball gains speed on each paddle impact, forcing one side to eventually make a mistake. Collisions are implemented by hand, and work most of the time.</p><p>Ping is written in Java and uses Swing for the UI.</p>",
    "repoLink": "https://github.com/esummers1/ping",
    "otherLink": ""
  },
  "programming-blog": {
    "splashImage": "assets/images/code.jpg",
    "title": "Blog",
    "content": "<p>I started running a blog on programming and software engineering when I had the chance to teach someone to program, and thought it would be a good idea to write the lessons up as a series of articles. The intent is to also write other articles about topics I find interesting. It is made using the Jekyll blog tool - specifically, with the Voyager theme. This explains why it looks much slicker than the main site.</p>",
    "repoLink": "https://github.com/esummers1/programming-blog",
    "otherLink": "https://programming.eddie-summers.com"
  },
  "lifting-blog": {
    "splashImage": "assets/images/fitness-blog.jpg",
    "title": "Blog",
    "content": "<p>Before becoming a software engineer I was a personal trainer - in fact my undergraduate degree is in Sport & Exercise Science. I kept up a blog with articles about lifting weights, organizing training programmes and nutrition. This stopped when I had the more ambitious idea to write my book, The Lifter's Manual, to unify the thoughts I was putting into blog posts.</p><p>Like the programming/software blog, it is made using the Voyager theme for Jekyll.</p>",
    "repoLink": "https://github.com/esummers1/lifting-blog",
    "otherLink": "https://lifting.eddie-summers.com"
  },
  "lifters-manual": {
    "splashImage": "assets/images/tlm.jpg",
    "title": "The Lifter's Manual",
    "content": "<p>The Lifter's Manual is a Kindle book I wrote to summarize everything I had learned about lifting weights from my degree, years of coaching clients, and (at the time) ten years of training myself. It is essentially what I wish I could give my 15 year old self.</p><p>From the Amazon blurb:</p><br /><p><b>Do you want to build muscle, get stronger and strip away fat?</b></p><p>There is more information available on lifting weights than ever before. This is good, but not all this advice is helpful. You might feel you’re being told (and sold) conflicting things, or that there’s too much to learn, or you might just be unhappy with your results.</p><p>This book is here to fix these problems. It’s a practical manual for lifters; it cuts through the bad advice and gives you the foundation of understanding you need, with zero fluff. Reading it will give you power over your body and fitness: to change them the way you want.</p><p>What you’ll find in this book:<ul><li>Logical step-by-step instructions on performing the main movements safely and effectively – whatever your current skill level</li><li>Detailed troubleshooting and time-tested regressions for when technique doesn’t go to plan</li><li>Simple, practical guidance for constructing your own progressive training programmes</li><li>How to decide what to eat and how much of it, plus which supplements are worth your money</li><li>Strategies for maximizing your recovery from training, to ensure you get the greatest result from the effort you put in</li><li>A roadmap for evolving your training as you get fitter and stronger</li></ul></p><p>It's time to build the body you've always wanted.</p>",
    "repoLink": "",
    "otherLink": "https://www.amazon.co.uk/Lifters-Manual-Build-Always-Wanted-ebook/dp/B01N9XKVVB/ref=sr_1_1?keywords=the+lifters+manual&qid=1555010496&s=gateway&sr=8-1"
  }
}